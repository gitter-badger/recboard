# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from rearpb import rearpb_pb2 as rearpb_dot_rearpb__pb2


class RearStub(object):
  """The Rear service definition.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SayHello = channel.unary_unary(
        '/rearpb.Rear/SayHello',
        request_serializer=rearpb_dot_rearpb__pb2.HelloRequest.SerializeToString,
        response_deserializer=rearpb_dot_rearpb__pb2.HelloReply.FromString,
        )
    self.HealthCheck = channel.unary_unary(
        '/rearpb.Rear/HealthCheck',
        request_serializer=rearpb_dot_rearpb__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=rearpb_dot_rearpb__pb2.HealthCheckReply.FromString,
        )


class RearServicer(object):
  """The Rear service definition.
  """

  def SayHello(self, request, context):
    """Sends a greeting
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def HealthCheck(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_RearServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SayHello': grpc.unary_unary_rpc_method_handler(
          servicer.SayHello,
          request_deserializer=rearpb_dot_rearpb__pb2.HelloRequest.FromString,
          response_serializer=rearpb_dot_rearpb__pb2.HelloReply.SerializeToString,
      ),
      'HealthCheck': grpc.unary_unary_rpc_method_handler(
          servicer.HealthCheck,
          request_deserializer=rearpb_dot_rearpb__pb2.HealthCheckRequest.FromString,
          response_serializer=rearpb_dot_rearpb__pb2.HealthCheckReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'rearpb.Rear', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
